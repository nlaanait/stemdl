{
	"log_device_placement": {"type":"bool", "value": false, "desc": "Whether to log device placement."},
	"allow_soft_placement": {"type":"bool", "value": true, "desc": "Whether to allow variable soft placement on the device This is needed for multi-gpu runs."},
	"log_frequency": {"type":"int", "value": 10, "desc": "How often to log results to the console."},
  "gpu_trace": {"type":"bool", "value": true, "desc": "Whether to run a hardware trace (timeline) at training step=101."},
  "trace_step": {"type":"int", "value": 101, "desc": "Step to run a hardware trace (timeline) at training"},
  "trace_dir" : { "type":"str", "value":"timelines", "desc": "Directory for timelines."},
  "epochs_per_saving": {"type":"float", "value":  0.5, "desc": "Save per how many epochs"},
  "epochs_per_validation": {"type":"float", "value":  200.0, "desc": "Validate per how many epochs"},
  "max_steps": {"type":"int", "value": 101, "desc": "Number of batches to run."},
	"num_epochs": {"type":"int", "value": 500, "desc": "Number of Data Epochs to do training"},
	"CPU_ID": { "type": "str", "value":"/cpu:0", "desc": "Which CPU to use in a multi-CPU machine.Default 0"},
	"NUM_EXAMPLES_PER_EPOCH": {"type":"int", "value": 148000, "desc": "Number of examples in training data."},
	"NUM_CLASSES": {"type":"int", "value": 230, "desc": "Number of classes in training/evaluation data."},
	"IMAGE_HEIGHT": {"type":"int", "value": 512, "desc": "IMAGE HEIGHT"},
	"IMAGE_WIDTH": {"type":"int", "value": 512, "desc": "IMAGE WIDTH"},
	"IMAGE_DEPTH": {"type":"int", "value": 1, "desc": "IMAGE DEPTH"},
	"IMAGE_DTYPE": {"type":"str", "value":"float16", "desc": " precision of images stored in the tfRecords file."},
	"LABEL_DTYPE": {"type":"str", "value":"float64", "desc": " precision of label stored in the tfRecords file."},
  "TENSOR_FORMAT":{"type":"str", "value":"NCHW", "desc": "Tensor format- NCHW or NHWC"},
  "dataset":{"type":"str", "value":"spacegroup_classification", "desc": " type of problem to shove in the black box!!"},
  "eval_distort": {"type":"bool", "value": false, "desc": "Whether to perform data distortion during evaluation."},
	"train_distort": {"type":"bool", "value": true, "desc": "Whether to perform data distortion during training."},
  "test_distort": {"type":"bool", "value": false, "desc": "Whether to perform data distortion during training."},
	"noise_min": {"value": 0.0, "type":"float", "desc":"minimum noise level"},
	"noise_max": {"value": 0.2, "type":"float", "desc":"maximum noise level"},
	"glimpse_mode": {"value": "off", "type":"str", "desc":"kind of glimpse" },
	"CROP_HEIGHT": {"type":"int", "value": 512, "desc": "CROP HEIGHT"},
	"CROP_WIDTH": {"type":"int", "value": 512, "desc": "CROP WIDTH"},
	"RESIZE_HEIGHT": {"type":"int", "value": 512, "desc": "RESIZE HEIGHT"},
	"RESIZE_WIDTH": {"type":"int", "value": 512, "desc": "RESIZE WIDTH"},
  "resize":{"type":"bool", "value": false},
	"tile":{"type":"bool", "value": false},
  "IMAGE_FP16": {"type":"bool", "value": true, "desc": " Whether to use half-precision format for images."},
	"batch_size": { "type": "int", "value":1, "desc": "number of images per batch to propagate through the network. Powers of 2 are processed more efficiently.Default 64."},
	"data_dir": {"type": "str", "value":"../../../data/CBED/CBED_spacegroup/", "desc": "path to tfrecords file with images + labels."},
	"checkpt_dir": { "type": "str", "value":"checkpoint", "desc": "path where to save directory with training data, visualization, and TensorBoard events."},
  "network_config": { "type": "str", "value":"network_FCDenseNet_custom.json", "desc": "path to .json file with neural net architecture."},
  "network_class": { "type": "str", "value":"resnet", "desc": "Options- cnn, resnet, fcdensenet"},
  "network_type": { "type": "str", "value":"classifier", "desc": "Options - regressor and classifier"},
	"hyper_params": { "type": "str", "value":"hyper_params.json", "desc": "path to .json file with hyper-parameters."},
	"mode": { "type": "str", "value":"train", "desc": "operation mode, must be 'train' or 'eval' .Default: 'train'"},
  "buffer_cap": {"type": "int", "value": 1024, "desc": "max number of data records per rank to keep in the I/O buffer."}
}
